[project]
name = "multidimio"
version = "0.9.1"
description = "Cloud-native, scalable, and user-friendly multi dimensional energy data!"
authors = [{ name = "Altay Sansal", email = "altay.sansal@tgs.com" }]
requires-python = ">=3.11,<3.14"
readme = "README.md"
license = { "text" = "Apache-2.0" }
keywords = [
    "mdio",
    "multidimio",
    "seismic",
    "wind",
    "data",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 4 - Beta"
]

dependencies = [
    "click (>=8.1.7,<9.0.0)",
    "click-params (>=0.5.0,<0.6.0)",
    "dask (>=2024.12.0)",
    "fsspec (>=2024.10.0)",
    "psutil (>=6.1.0,<7.0.0)",
    "rich (>=13.9.4,<14.0.0)",
    "segy (>=0.4.0,<0.5.0)",
    "tqdm (>=4.67.0,<5.0.0)",
    "zarr (>=3.0.4,<3.0.7)",
]

[project.optional-dependencies]
cloud = [
    "s3fs == 2024.12.0",
    "gcsfs (>=2024.10.0)",
    "adlfs (>=2024.7.0)",
]
distributed = [
    "distributed (>=2024.12.0)",
    "bokeh (>=3.4.2,<4.0.0)",
]
lossy = ["zfpy (>=1.0.1,<2.0.0)"]

[project.urls]
homepage = "https://mdio.dev/"
repository = "https://github.com/TGSAI/mdio-python"
documentation = "https://mdio-python.readthedocs.io"

[project.scripts]
mdio = "mdio.__main__:main"

[dependency-groups]
dev = [
    "ruff (>=0.11.8)",
    "coverage[toml] (>=7.6.7,<8)",
    "mypy (>=1.13.0,<2)",
    "pre-commit (>=4.0.1,<5)",
    "pre-commit-hooks (>=5.0.0,<6)",
    "pytest (>=8.3.3,<9)",
    "pytest-dependency (>=0.6.0,<0.7)",
    "safety (>=3.2.3,<4)",
    "typeguard (>=4.4.1,<5)",
    "xdoctest[colors] (>=1.2.0,<2)",
    "Pygments (>=2.18.0,<3)",
]

docs = [
    "furo (>=2024.8.6)",
    "linkify-it-py (>=2.0.3)",
    "myst-nb (>=1.2.0)",
    "sphinx (>=8.2.3,<9)",
    "sphinx-autobuild (>=2024.10.3)",
    "sphinx-click (>=6.0.0,<7)",
    "sphinx-copybutton (>=0.5.2,<0.6)",
    "sphinx-design (>=0.6.1,<0.7)",
]



[tool.uv]
required-version = "0.6.11"

[tool.ruff]
target-version = "py311"
src = ["src"]
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "B",   # bugbear
    "I",   # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "ANN", # annotations
    "S",   # bandit
    "A",   # builtins
    "C4",  # comprehensions
    "DTZ", # datetimez
    "EM",  # errmsg
    "ICN", # import-conventions
    "PIE", # pie
    "PT",  # pytest-style
    "RSE", # raise
    "RET", # return
    "SIM", # simplify
    "TID", # tidy-imports
    "TCH", # type-checking
    "ARG", # unused-arguments
    "PTH", # use-pathlib
    "TD",  # todos
    "PL",  # pylint
    "FLY", # flynt
    "NPY201", # numpy
    "LOG", # logging
    "G", # logging-format
    "PERF", # perflint
    "FA",  # flake8-future-annotations
]

ignore = [
    "D107",   # Missing docstring in __init__ ; should be in class docstring
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"tests/integration/test_segy_import_export_masked.py" = ["E501"]
"docs/tutorials/*.ipynb" = ["S101"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pycodestyle]
max-line-length = 100
ignore-overlong-task-comments = true

[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["src/mdio", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_also = [
    "if __name__ == __main__:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]

[tool.mypy]
strict = true
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
disallow_untyped_defs = true # for strict mypy: (this is the tricky one)
plugins = ["numpy.typing.mypy_plugin"]

[tool.bumpversion]
current_version = "0.9.1"
allow_dirty = true
commit = false
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.dev(?P<dev>\\d+))?"
serialize = [
    "{major}.{minor}.{patch}.dev{dev}",  # For dev releases
    "{major}.{minor}.{patch}"            # For stable releases
]

[build-system]
requires = ["setuptools", "wheel", "fastentrypoints"]
build-backend = "setuptools.build_meta"
