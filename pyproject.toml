[tool.poetry]
name = "multidimio"
version = "1.0.0-alpha.1"
description = "Cloud-native, scalable, and user-friendly multi dimensional energy data!"
authors = ["TGS <sys-opensource@tgs.com>"]
maintainers = [
    "Altay Sansal <altay.sansal@tgs.com>",
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://mdio.dev"
repository = "https://github.com/TGSAI/mdio-python"
documentation = "https://mdio-python.readthedocs.io"
classifiers = [
    "Development Status :: 4 - Beta",
]
packages = [
    { include = "mdio", from = "src" },
]
keywords = ["mdio", "multidimio", "seismic", "wind", "data"]

[tool.poetry.urls]
Changelog = "https://github.com/TGSAI/mdio-python/releases"

[tool.poetry.dependencies]
python = ">=3.9,<3.13"
click = "^8.1.7"
click-params = "^0.5.0"
zarr = "^2.16.1"
dask = "^2024.1.0"
tqdm = "^4.66.1"
segyio = "^1.9.3"
numba = "0.59.0rc1"
psutil = "^5.9.7"
fsspec = "^2023.12.2"
pydantic = "^2.5.3"
pint = "^0.23"
distributed = {version = ">=2024.1.0", optional = true}
bokeh = {version = "^3.3.2", optional = true}
s3fs = {version = ">=2023.12.2", optional = true}
gcsfs = {version = ">=2023.12.2.post1", optional = true}
adlfs = {version = ">=2023.12.0", optional = true}
zfpy = {version = "^0.5.5", optional = true}
urllib3 = "^1.26.18" # Workaround for poetry-plugin-export/issues/183


[tool.poetry.extras]
distributed = ["distributed", "bokeh"]
cloud = ["s3fs", "gcsfs", "adlfs"]
lossy = ["zfpy"]

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.13"
coverage = {version = "^7.4.0", extras = ["toml"]}
darglint = "^1.8.1"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
pre-commit-hooks = "^4.5.0"
pytest = "^7.4.4"
safety = "^2.3.5"
typeguard = "^4.1.5"
xdoctest = {version = "^1.1.2", extras = ["colors"]}
Pygments = "^2.17.2"


[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-design = "^0.5.0"
sphinx-click = "^5.1.0"
sphinx-copybutton = "^0.5.2"
furo = ">=2023.9.10"
myst-nb = "^1.0.0"
linkify-it-py = "^2.0.2"
autodoc-pydantic = "^2.0.1"
sphinx-autobuild = ">=2021.3.14"

[tool.poetry.scripts]
mdio = "mdio.__main__:main"

[tool.ruff]
target-version = "py39"
src = ["src"]
select = [
    "E",  # pycodestyle
    "F",   # pyflakes
    "B",  # bugbear
    "I",  # isort
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "D",   # pydocstyle
    "ANN",  # annotations
    "S",  # bandit
    "A",  # builtins
    "C4",  # comprehensions
    "DTZ",  # datetimez
    "EM",  # errmsg
    "ICN",  # import-conventions
    "PIE",  # pie
    "PT",  # pytest-style
    "RSE",  # raise
    "RET",  # return
    "SIM",  # simplify
    "TID",  # tidy-imports
    "TCH",  # type-checking
    "ARG",  # unused-arguments
    "PTH",  # use-pathlib
    "TD",  # todos
    "PL",  # pylint
    "FLY", # flynt
    "NPY",  # numpy
]
ignore = [
    "ANN101",  # Missing type annotation for `self`
]


[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
force-single-line = true

[tool.ruff.lint.pycodestyle]
max-line-length = 100
ignore-overlong-task-comments = true

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["mdio", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = ["segyio", "zarr"]
ignore_missing_imports = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
